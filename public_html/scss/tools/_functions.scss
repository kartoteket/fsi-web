
/**
 * Strips unit from value
 * @param  {[type]} $num [description]
 * @return {[type]}      [description]
 */
@function strip-unit($num) {
    @return $num / ($num * 0 + 1);
}


/**
 * Converts px value to rem
 * @param  {[type]} $value       [description]
 * @param  {[type]} $base-value: $rem-base     [description]
 * @return {[type]}              [description]
 */
@function convert-to-rem($value, $base-value: $base-font-size) {
    $value: strip-unit($value) / strip-unit($base-value) * 1rem;
    @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
    @return $value;
}


/**
 * Calcualtes rem-value on font-size as base-line
 * @param  {int} $values      int or space seperated list of ints
 * @param  {int} $base-value: $rem-base
 * @return {int}              returns single or multiple rem-value(s)
 */
@function rem-calc($values, $base-value: $base-font-size) {
    $max: length($values);
    @if $max == 1 {
        @return convert-to-rem(nth($values, 1), $base-value);
    }
    $rem-values: ();
    @for $i from 1 through $max {
        $rem-values: append($rem-values, convert-to-rem(nth($values, $i), $base-value));
    }
    @return $rem-values;
}


/// Is It Light?
/// Checks the lightness of $color, and if it passes the $threshold of lightness, it returns the `$yes` color. Otherwise, it returns the `$no` color. Use this function to dynamically output a foreground color based on a given background color.
///
/// @param {color} $color - Color to check the lightness of.
/// @param {color} $yes - Color to return if $color is light.
/// @param {color} $no - Color to return if $color is dark.
/// @param {percentage} $threshold - Threshold of lightness to check against.
///
/// @return The $yes color or $no color.
@function isitlight($color, $yes: #000, $no: #fff, $threshold: 60%) {
    @if (lightness($color) > $threshold) {
        @return $yes;
    } @else {
        @return $no;
    }
}
